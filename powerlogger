#!/usr/bin/perl -w

use strict;
use POSIX qw(strftime);
use Data::Dumper;
use IO::Socket::INET;

my $rrddir = "/srv/power";

# auto-flush on socket
$| = 1;

while(1) { 
    # create a connecting socket
    my $socket = new IO::Socket::INET (
	PeerHost => 'rpi1',
	PeerPort => '12346',
	Proto => 'tcp',
	);
    
    if( not defined $socket ) {
	print "Failed to connect: $!\n";
	sleep 5;
	next;
    }

    while ( my $line = <$socket> ) {
	my $msg = parse_xml( $line );
	
	my $sensor = $msg->{msg}->{sensor};
	if( not defined $sensor ) {
	    next;
	}

	my $ch1 = 0 + $msg->{msg}->{ch1}->{watts};
	my $ch2 = 0 + $msg->{msg}->{ch2}->{watts} if defined $msg->{msg}->{ch2};
	my $ch3 = 0 + $msg->{msg}->{ch3}->{watts} if defined $msg->{msg}->{ch3};
	
	if( $sensor eq "9" ) {
	    qx(rrdtool update $rrddir/total.rrd N:$ch1);
	}
	elsif( $sensor eq "0" ) {
	    qx(rrdtool update $rrddir/garage.rrd N:$ch1:$ch2:$ch3);
	}
	else {
#	    print "Unknown: " . Dumper( $msg ) . "\n";
	}
    }
    $socket->close();
}

sub parse_xml {
    my( $str ) = @_;
    my $result = {};
    die if not defined $str;
    if( $str !~ /</ ) {
	return $str;
    }

    while( length($str) > 2 ) {
	$str =~ s%^\<([a-z0-9]+)\>(.*?)\</\g1\>%%;

	my $tag = $1;
	my $content = $2;
	if( not defined $tag ) {
#	    print "Failed to parse $str\n";
	    return {};
	}
	$result->{$tag} = parse_xml( $content );
    }

    return $result;
}
